const { updateEnv, readEnv } = require('../lib/database');
const EnvVar = require('../lib/mongodbenv');
const { cmd } = require('../command');

cmd({
    pattern: "updateenv",
    alias: ["updateenv"],
    desc: "Check and update environment variables",
    category: "owner",
    filename: __filename,
},
async (conn, mek, m, { from, q, reply, isOwner }) => {
    if (!isOwner) return;

    // Config ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä LANGUAGE ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
    const env = await readEnv();
    const language = env.LANGUAGE ? env.LANGUAGE.toLowerCase() : 'english';

    // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©
    const messages = {
        sinhala: {
            noPermission: "üôá‚Äç‚ôÇÔ∏è *‡∂î‡∂∂‡∂ß ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä ‡∑É‡∑í‡∂Ø‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑É‡∂ª ‡∂±‡∑ê‡∂≠.*",
            noQuery: "üôá‚Äç‚ôÇÔ∏è *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂â‡∂±‡∑ä‡∑Ä‡∂∫‡∂ª‡∂±‡∑ä‡∂∏‡∂±‡∑ä‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂ª‡∑í‡∂∫‡∂∂‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∑É‡∑Ñ ‡∂ë‡∑Ñ‡∑í ‡∂±‡∑Ä ‡∑Ä‡∂ß‡∑í‡∂±‡∑è‡∂ö‡∂∏ ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±.* \n\n‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫: `.update ALIVE_MSG: HELLOW I AM LAKSIDU`",
            invalidFormat: "ü´† *‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∂ö‡∑í. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∏ ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:* `.update KEY:VALUE`",
            invalidMode: (validModes) => `üòí *‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂∏‡∑ù‡∂©‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä. ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂∏‡∑ù‡∂©‡∑ä: ${validModes.join(', ')}*`,
            invalidUrl: "üòì *‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í URL ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∂ö‡∑í. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ª‡∑ñ‡∂¥ URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.*",
            invalidBoolean: (key) => `üòì *${key} ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∑Ä‡∂ß‡∑í‡∂±‡∑è‡∂ö‡∂∏‡∂ö‡∑ä. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª 'true' ‡∑Ñ‡∑ù 'false' ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*`,
            invalidString: (key) => `üòì *${key} ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∑Ä‡∂ß‡∑í‡∂±‡∑è‡∂ö‡∂∏‡∂ö‡∑ä. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î string ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*`,
            invalidJid: (key) => `üòì *${key} ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í JID ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∂ö‡∑í. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î WhatsApp JID ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*`,
            varNotFound: (key, envList) => `‚ùå *${key} ‡∂â‡∂±‡∑ä‡∑Ä‡∂∫‡∂ª‡∂±‡∑ä‡∂∏‡∂±‡∑ä‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂ª‡∑í‡∂∫‡∂∂‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.*\n\n*‡∂¥‡∑Ä‡∂≠‡∑í‡∂± ‡∂â‡∂±‡∑ä‡∑Ä‡∂∫‡∂ª‡∂±‡∑ä‡∂∏‡∂±‡∑ä‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂ª‡∑í‡∂∫‡∂∂‡∂Ω‡∑ä‡∑É‡∑ä:*\n\n${envList}`,
            success: (key, value, mode) => `‚úÖ *‡∂â‡∂±‡∑ä‡∑Ä‡∂∫‡∂ª‡∂±‡∑ä‡∂∏‡∂±‡∑ä‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂ª‡∑í‡∂∫‡∂∂‡∂Ω‡∑ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í.*\n\nüóÉÔ∏è *${key}* ‚û† ${value} ${mode ? `\n*‡∂∏‡∑ù‡∂©‡∑ä:* ${mode}` : ''}\n\n\n> HASHI MD`,
            error: (err) => "üíÉüèª *‡∂â‡∂±‡∑ä‡∑Ä‡∂∫‡∂ª‡∂±‡∑ä‡∂∏‡∂±‡∑ä‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂ª‡∑í‡∂∫‡∂∂‡∂Ω‡∑ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂¥‡∑ú‡∑Ñ‡∑ú‡∑É‡∂≠‡∑ä ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.* " + err,
        },
        english: {
            noPermission: "üôá‚Äç‚ôÇÔ∏è *You don‚Äôt have permission to perform this action.*",
            noQuery: "üôá‚Äç‚ôÇÔ∏è *Please provide the environment variable and its new value.* \n\nExample: `.update ALIVE_MSG: HELLOW I AM LAKSIDU`",
            invalidFormat: "ü´† *Invalid format. Please use the format:* `.update KEY:VALUE`",
            invalidMode: (validModes) => `üòí *Invalid mode. Valid modes are: ${validModes.join(', ')}*`,
            invalidUrl: "üòì *Invalid URL format. PLEASE GIVE ME IMAGE URL*",
            invalidBoolean: (key) => `üòì *Invalid value for ${key}. Please use 'true' or 'false'.*`,
            invalidString: (key) => `üòì *Invalid value for ${key}. Please use a valid string.*`,
            invalidJid: (key) => `üòì *Invalid JID format for ${key}. Please use a valid WhatsApp JID.*`,
            varNotFound: (key, envList) => `‚ùå *The environment variable ${key} does not exist.*\n\n*Here are the existing environment variables:*\n\n${envList}`,
            success: (key, value, mode) => `‚úÖ *Environment variable updated.*\n\nüóÉÔ∏è *${key}* ‚û† ${value} ${mode ? `\n*Mode:* ${mode}` : ''}\n\n\n> HASHI MD`,
            error: (err) => "üíÉüèª *Failed to update the environment variable. Please try again.* " + err,
        }
    };

    const msg = messages[language] || messages.english; // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑ú‡∂≠‡∑ä ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è

    if (!q) {
        return reply(msg.noQuery);
    }

    // ‡∂¥‡∑Ö‡∂∏‡∑î colon ‡∑Ñ‡∑ù comma ‡∂ë‡∂ö‡∑ö ‡∂¥‡∑í‡∑Ñ‡∑í‡∂ß‡∑ì‡∂∏ ‡∑Ñ‡∑ú‡∂∫‡∂±‡∑Ä‡∑è
    const colonIndex = q.indexOf(':');
    const commaIndex = q.indexOf(',');

    // ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î delimiter ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω ‡∂∂‡∂Ω‡∂±‡∑Ä‡∑è
    const delimiterIndex = colonIndex !== -1 ? colonIndex : commaIndex;
    if (delimiterIndex === -1) {
        return reply(msg.invalidFormat);
    }

    // Key ‡∑É‡∑Ñ Value ‡∂Ω‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
    const key = q.substring(0, delimiterIndex).trim();
    const value = q.substring(delimiterIndex + 1).trim();
    
    // Mode ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è (‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä)
    const parts = value.split(/\s+/).filter(part => part.trim());
    const newValue = value; // ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂Ø‡∑î‡∂±‡∑ä ‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∑Ä‡∂ß‡∑í‡∂±‡∑è‡∂ö‡∂∏ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    const mode = parts.length > 1 ? parts.slice(1).join(' ').trim() : '';
    
    const validModes = ['public', 'private', 'groups', 'inbox'];
    const finalMode = validModes.includes(mode) ? mode : '';

    if (!key || !newValue) {
        return reply(msg.invalidFormat);
    }

    // Validation checks for all environment variables
    if (key === 'ALIVE_IMG' && !newValue.startsWith('https://')) {
        return reply(msg.invalidUrl);
    }
    if (key === 'START_PHOTO_URL' && !newValue.startsWith('https://')) {
        return reply(msg.invalidUrl);
    }
    if (key === 'PREFIX' && newValue.length > 1) {
        return reply(msg.invalidString('PREFIX')); // PREFIX should be a single character
    }
    if (key === 'LANGUAGE' && !['sinhala', 'english'].includes(newValue.toLowerCase())) {
        return reply(msg.invalidString('LANGUAGE')); // Only sinhala or english allowed
    }
    if (key === 'AUTO_READ_STATUS' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('AUTO_READ_STATUS'));
    }
    if (key === 'AUTO_REACT' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('AUTO_REACT'));
    }
    if (key === 'FAKE_RECORDING' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('FAKE_RECORDING'));
    }
    if (key === 'AUTO_TYPING' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('AUTO_TYPING'));
    }
    if (key === 'ANTI_LINK' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('ANTI_LINK'));
    }
    if (key === 'AUTO_VOICE' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('AUTO_VOICE'));
    }
    if (key === 'AUTO_REPLY' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('AUTO_REPLY'));
    }
    if (key === 'ANTI_BAD' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('ANTI_BAD'));
    }
    if (key === 'READ_MESSAGE' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('READ_MESSAGE'));
    }
    if (key === 'ALWAYS_ONLINE' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('ALWAYS_ONLINE'));
    }
    if (key === 'ANTI_DELETE' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('ANTI_DELETE'));
    }
    if (key === 'INBOX_BLOCK' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('INBOX_BLOCK'));
    }
    if (key === 'ANTI_BOT' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('ANTI_BOT'));
    }
    if (key === 'AUTO_TIKTOK' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('AUTO_TIKTOK'));
    }
    if (key === 'AUTO_NEWS_ENABLED' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('AUTO_NEWS_ENABLED'));
    }
    if (key === 'SEND_START_NEWS' && !['true', 'false'].includes(newValue)) {
        return reply(msg.invalidBoolean('SEND_START_NEWS'));
    }
    if (key === 'AUTO_NEWS_GROUP_JID' && !newValue.endsWith('@g.us')) {
        return reply(msg.invalidJid('AUTO_NEWS_GROUP_JID')); // Should be a valid WhatsApp group JID
    }
    if (key === 'AUTO_TIKTOK_JID' && !newValue.endsWith('@g.us')) {
        return reply(msg.invalidJid('AUTO_TIKTOK_JID')); // Should be a valid WhatsApp group JID
    }
    if (key === 'DELETEMSGSENDTO' && newValue && !newValue.endsWith('@s.whatsapp.net') && !newValue.endsWith('@g.us')) {
        return reply(msg.invalidJid('DELETEMSGSENDTO')); // Should be a valid WhatsApp JID or empty
    }

    try {
        // ‡∂â‡∂±‡∑ä‡∑Ä‡∂∫‡∂ª‡∂±‡∑ä‡∂∏‡∂±‡∑ä‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂ª‡∑í‡∂∫‡∂∂‡∂Ω‡∑ä ‡∂ë‡∂ö ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω ‡∂∂‡∂Ω‡∂±‡∑Ä‡∑è
        const envVar = await EnvVar.findOne({ key: key });

        if (!envVar) {
            // ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, ‡∂¥‡∑Ä‡∂≠‡∑í‡∂± ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ env vars ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∂ö‡∑ä ‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
            const allEnvVars = await EnvVar.find({});
            const envList = allEnvVars.map(env => `${env.key}: ${env.value}`).join('\n');
            return reply(msg.varNotFound(key, envList));
        }

        // ‡∂â‡∂±‡∑ä‡∑Ä‡∂∫‡∂ª‡∂±‡∑ä‡∂∏‡∂±‡∑ä‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂ª‡∑í‡∂∫‡∂∂‡∂Ω‡∑ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        await updateEnv(key, newValue, finalMode);
        reply(msg.success(key, newValue, finalMode));
        
    } catch (err) {
        console.error('Error updating environment variable:' + err.message);
        reply(msg.error(err));
    }
});